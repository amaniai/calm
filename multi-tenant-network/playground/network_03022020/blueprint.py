# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_PC_ADMIN_PASSWORD = read_local_file("BP_CRED_PC_ADMIN_PASSWORD")

# Credentials
BP_CRED_PC_ADMIN = basic_cred(
    "admin",
    BP_CRED_PC_ADMIN_PASSWORD,
    name="PC_ADMIN",
    type="PASSWORD",
    default=True,
)


class API(Service):

    NETWORK = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    GATEWAY = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    POOL_START = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    POOL_END = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    VLAN = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    MASK = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def create_network():

        CLUSTER_UUID = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        NETWORK_NAME = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        CUSTOMER_ID = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        CalmTask.SetVariable.escript(
            name="get_vlan_subnet",
            filename=os.path.join(
                "scripts", "Service_API_Action_create_network_Task_get_vlan_subnet.py"
            ),
            target=ref(API),
            variables=["NETWORK", "GATEWAY", "POOL_START", "POOL_END", "VLAN", "MASK"],
        )
        CalmTask.HTTP.post(
            "https://@@{PrismCentral.address}@@:9440/api/nutanix/v0.8/networks?proxyClusterUuid=@@{CLUSTER_UUID}@@",
            body=json.dumps(
                {
                    "name": "@@{CUSTOMER_ID}@@-@@{NETWORK_NAME}@@",
                    "vlanId": "@@{VLAN}@@",
                    "ipConfig": {
                        "dhcpOptions": {
                            "domainNameServers": "@@{DNS_SERVERS}@@",
                            "domainSearch": "@@{DOMAIN}@@",
                            "domainName": "@@{DOMAIN}@@",
                        },
                        "networkAddress": "@@{NETWORK}@@",
                        "prefixLength": "@@{MASK}@@",
                        "defaultGateway": "@@{GATEWAY}@@",
                        "pool": [{"range": "@@{POOL_START}@@ @@{POOL_END}@@"}],
                    },
                }
            ),
            headers={},
            secret_headers={},
            content_type="application/json",
            verify=False,
            status_mapping={200: True},
            response_paths={"NEW_NETWORK_UUID": "$.networkUuid"},
            name="create_network_api",
            target=ref(API),
        )
        CalmTask.Exec.escript(
            name="update_category",
            filename=os.path.join(
                "scripts", "Service_API_Action_create_network_Task_update_category.py"
            ),
            target=ref(API),
        )


class PrismCentral(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "PrismCentral_provider_spec.yaml")
    )
    provider_spec_editables = read_spec(
        os.path.join("specs", "PrismCentral_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
    )


class Package1(Package):

    services = [ref(API)]


class _9df03093_deployment(Deployment):

    name = "9df03093_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(PrismCentral)


class Default(Profile):

    deployments = [_9df03093_deployment]

    DOMAIN = CalmVariable.Simple(
        "demo.lan",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    DNS_SERVERS = CalmVariable.Simple(
        "10.38.17.17",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    BRIDGE_NAME = CalmVariable.Simple(
        "br0",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def create_network():
        """Create a private network on a specific cluster for customer_id"""

        CLUSTER_UUID = CalmVariable.Simple(
            "",
            label="Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CUSTOMER_ID = CalmVariable.Simple(
            "",
            label="Customer ID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        NETWORK_NAME = CalmVariable.Simple(
            "",
            label="Network Name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        API.create_network(name="create_network")


class network_03022020(Blueprint):
    """Blueprint to manage network on agora"""

    services = [API]
    packages = [Package1]
    substrates = [PrismCentral]
    profiles = [Default]
    credentials = [BP_CRED_PC_ADMIN]
