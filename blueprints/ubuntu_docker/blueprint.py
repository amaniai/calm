# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_UBUNTU_PASSWORD = read_local_file("BP_CRED_UBUNTU_PASSWORD")

# Credentials
BP_CRED_UBUNTU = basic_cred(
    "ubuntu",
    BP_CRED_UBUNTU_PASSWORD,
    name="UBUNTU",
    type="PASSWORD",
    default=True,
)


ubuntu_20_04_cloud = vm_disk_package(
    name="ubuntu_20_04_cloud",
    description="Standard ubuntu 20.04 cloud image",
    config={
        "name": "ubuntu_20_04_cloud",
        "image": {
            "name": "ubuntu_20_04_cloud",
            "type": "DISK_IMAGE",
            "source": "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img",
            "architecture": "X86_64",
        },
        "product": {"name": "Ubuntu", "version": "20.04"},
        "checksum": {},
    },
)


class Ubuntu(Service):

    pass


class VMResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(ubuntu_20_04_cloud, bootable=True)
    ]
    nics = [
        AhvVmNic.NormalNic.ingress("Network-02", cluster="Middle-East-Lab-cluster2")
    ]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "VM_cloud_init_data.yaml")
    )


class UbuntuAHV(AhvVm):

    name = "ubuntu-@@{calm_random}@@"
    resources = VMResources


class UbuntuVM(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = UbuntuAHV
    provider_spec_editables = read_spec(
        os.path.join("specs", "VM_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="20",
    )


class PackageUbuntu(Package):

    services = [ref(Ubuntu)]

    @action
    def __install__(self):

        CalmTask.Exec.escript(
            name="resize_disk",
            filename=os.path.join(
                "scripts",
                "action___install___Task_resize_disk.py",
            ),
            target=ref(Ubuntu),
        )
        CalmTask.Exec.ssh(
            name="update_os",
            filename=os.path.join(
                "scripts", "action___install___Task_update_os.sh"
            ),
            target=ref(Ubuntu),
        )
        CalmTask.Delay(
            name="wait_for_disk_resize", delay_seconds=20, target=ref(Ubuntu)
        )
        CalmTask.Exec.ssh(
            name="install_docker",
            filename=os.path.join(
                "scripts",
                "action___install___Task_install_docker.sh",
            ),
            target=ref(Ubuntu),
        )
        CalmTask.Delay(name="wait_for_reboot", delay_seconds=20, target=ref(Ubuntu))


class DefaultDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(PackageUbuntu)]
    substrate = ref(UbuntuVM)


class Default(Profile):

    deployments = [DefaultDeployment]


class UbuntuDocker(Blueprint):
    """Ubuntu server 20.04 with docker-ce """

    services = [Ubuntu]
    packages = [PackageUbuntu, ubuntu_20_04_cloud]
    substrates = [UbuntuVM]
    profiles = [Default]
    credentials = [BP_CRED_UBUNTU]
