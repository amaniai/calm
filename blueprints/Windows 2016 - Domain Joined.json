{"status":{},"contains_secrets":false,"product_version":"3.2.6","spec":{"description":"Windows Server 2016 joined to domain\nRequesting user added to local admin of the server","resources":{"client_attrs":{},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3bc436cc_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"13913215_runbook","main_task_local_reference":{"kind":"app_task","name":"3bc436cc_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5252f4da_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"94b84d56_runbook","main_task_local_reference":{"kind":"app_task","name":"5252f4da_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"bfbad1e2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"26acebf0_runbook","main_task_local_reference":{"kind":"app_task","name":"bfbad1e2_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"66f94a6b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"12541aca_runbook","main_task_local_reference":{"kind":"app_task","name":"66f94a6b_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"51228512_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"bc5c30aa_runbook","main_task_local_reference":{"kind":"app_task","name":"51228512_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Service1","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"WIN_VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b61b1a93_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b9043af0_runbook","main_task_local_reference":{"kind":"app_task","name":"b61b1a93_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"WIN_VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"remove_computer_from_ad"}],"name":"0510ff7b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"WIN_VM1"},"retries":"0","description":"","exec_target_reference":{"kind":"app_endpoint","name":"DuabiLab-AD"},"child_tasks_local_reference_list":[],"name":"remove_computer_from_ad","attrs":{"exit_status":[],"script":"Remove-ADComputer -Confirm:$false -Identity \"@@{VM_NAME}@@-@@{calm_unique}@@\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"SVC_ACCOUNT"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"83d16931_runbook","main_task_local_reference":{"kind":"app_task","name":"0510ff7b_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"WIN_VM1","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":true},"editables":{"create_spec":{"resources":{"nic_list":{"0":{"subnet_reference":true}},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"CALM-WIN-@@{VM_NAME}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"fa8b4999-6b07-4893-a435-2e1b578133dc"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":2,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":true,"install_type":"PREPARED","domain_credential_reference":{"kind":"app_credential","name":"SVC_ACCOUNT","uuid":"07ae8015-71be-4d3c-ac70-153124168e22"},"domain":"DubaiLab.nutanix.local","dns_ip":"10.0.0.118,10.0.0.119","dns_search_path":"DubaiLab.nutanix.local","unattend_xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n   <settings pass=\"specialize\">\n      <component name=\"Microsoft-Windows-TerminalServices-LocalSessionManager\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <fDenyTSConnections>false<\/fDenyTSConnections>\n      <\/component>\n      <component name=\"Microsoft-Windows-TerminalServices-RDP-WinStationExtensions\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\">\n         <UserAuthentication>0<\/UserAuthentication>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Networking-MPSSVC-Svc\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <FirewallGroups>\n            <FirewallGroup wcm:action=\"add\" wcm:keyValue=\"RemoteDesktop\">\n               <Active>true<\/Active>\n               <Profile>all<\/Profile>\n               <Group>@FirewallAPI.dll,-28752<\/Group>\n            <\/FirewallGroup>\n         <\/FirewallGroups>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <ComputerName>@@{VM_NAME}@@-@@{calm_unique}@@<\/ComputerName>\n         <RegisteredOrganization>Nutanix<\/RegisteredOrganization>\n         <RegisteredOwner>Acropolis<\/RegisteredOwner>\n         <TimeZone>UTC<\/TimeZone>\n      <\/component>\n   <\/settings>\n   <settings pass=\"oobeSystem\">\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <UserAccounts>\n            <AdministratorPassword>\n               <Value>@@{LOCAL_ADMIN.secret}@@<\/Value>\n               <PlainText>true<\/PlainText>\n            <\/AdministratorPassword>\n         <\/UserAccounts>\n         <OOBE>\n            <HideEULAPage>true<\/HideEULAPage>\n            <SkipMachineOOBE>true<\/SkipMachineOOBE>\n         <\/OOBE>\n      <\/component>\n      <component xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n         <InputLocale>en-US<\/InputLocale>\n         <SystemLocale>en-US<\/SystemLocale>\n         <UILanguageFallback>en-us<\/UILanguageFallback>\n         <UILanguage>en-US<\/UILanguage>\n         <UserLocale>en-US<\/UserLocale>\n      <\/component>\n   <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"8eb439bd-8ff5-49a7-9baa-546db5d70e71","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"windows-2016","uuid":"b29e2fcb-c068-40d3-9eff-da34422c4cdd"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"LOCAL_ADMIN"},{"username":"administrator@DubaiLab.nutanix.local","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"SVC_ACCOUNT"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Service1"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"apply_default_policy"},{"kind":"app_task","name":"wait"},{"kind":"app_task","name":"add_user_to_localadmin"}],"name":"bd92bd7c_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"apply_default_policy"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"wait"}},{"from_task_reference":{"kind":"app_task","name":"wait"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"add_user_to_localadmin"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"apply_default_policy","attrs":{"exit_status":[],"script":"#script\n\n# Task name: Create a secuirty policy based on project and application name\n# Description: \n#\n# Required Calm variables: \n#   None\n# Version: v1.0\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n\n\n# Prism API call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  jwt = '@@{calm_jwt}@@'\n  pc_address = '127.0.0.1'\n  pc_port = '9440'\n\n  url = \"https:\/\/{}:{}\/api\/nutanix\/v3\/{}\".format(\n    pc_address,\n    pc_port,\n    api_endpoint\n  )\n\n  headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json',\n    'Authorization': 'Bearer {}'.format(jwt)\n  }\n\n  if len(payload) > 0:\n    payload = json.dumps(payload)\n\n\n  resp = urlreq(\n    url,\n    verb=method,\n    params=payload,\n    headers=headers,\n    verify=False\n  )\n\n  if resp.ok:\n    return json.loads(resp.content), resp.ok\n  else:\n    print('Error in API call')\n    print(resp)\n    print(resp.content)\n\n\ndef add_category_key(category_name, category_key):\n  payload = {'value': category_key}\n  _, status = http_request('categories\/{}\/{}'.format(category_name, category_key), payload=payload, method='PUT')\n  if status:\n    return True\n  else:\n    return False\n\n\ndef update_vm_category(vm_uuid, category_name, cateogry_key):\n  resp, status = http_request('vms\/{}'.format(vm_uuid), method='GET')\n  if status:\n    payload = {\n      'spec': resp['spec'],\n      'api_version': resp['api_version'],\n      'metadata': resp['metadata']\n    }\n  else:\n    print('Error getting VM details from Prism')\n    exit(1)\n\n  payload['metadata']['categories'][category_name] = category_key\n\n  result, status = http_request('vms\/{}'.format(vm_uuid), payload=payload, method='PUT')\n\n  return result, status\n\n\ndef generate_ace(ace):\n  ip = ace.get('ip')\n  prefix = int(ace.get('prefix', 0))\n  proto = ace.get('protocol')\n  port = int(ace.get('port', 0))\n  entry = {\n    'peer_specification_type': 'IP_SUBNET',\n    'ip_subnet': {\n      'ip': ip,\n      'prefix_length': prefix\n    },\n    'protocol': proto,\n  }\n  \n  if proto == 'TCP':\n    entry['tcp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n  elif proto == 'UDP':\n    entry['udp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n\n  return entry\n\ndef create_security_policy(category_name, category_key, description='', base_acl=[]):\n  name = 'calm-{}'.format(category_key)\n  if len(description) == 0:\n      description = name\n\n  target_group = {\n    'peer_specification_type': 'FILTER',\n    'filter': {\n      'type': 'CATEGORIES_MATCH_ALL',\n      'kind_list': ['vm'],\n      'params': {category_name: [category_key]}\n    }\n  }\n\n  resources = {\n    'allow_ipv6_traffic': False,\n    'is_policy_hitlog_enabled': False,\n    'app_rule': {\n      'target_group': target_group,\n      'inbound_allow_list': [],\n      'outbound_allow_list': [{'peer_specification_type': 'ALL'}],\n      'action': 'APPLY'\n    }\n  }\n\n  acl = []\n  for ace in base_acl:\n    acl.append(generate_ace(ace))\n\n  resources['app_rule']['inbound_allow_list'] = acl\n\n  payload = {\n    'api_version': '3.1.0',\n    'metadata': {'kind': 'network_security_rule'},\n    'spec': {\n      'name': name,\n      'description': description,\n      'resources': resources\n    }\n  }\n\n  resp, status =  http_request('network_security_rules', payload=payload)\n  return resp, status\n\n# ##########################################################################################\n# Main task function\n# ##########################################################################################\n\nproject_name = re.sub('[\\W_]+', '', '@@{calm_project_name}@@')\napp_name = re.sub('[\\W_]+', '', '@@{calm_application_name}@@')\ndescription = 'Project name: {}, Application name: {}'.format('@@{calm_project_name}@@'\n                                                      ,'@@{calm_application_name}@@')\nrandom_num = '@@{calm_random}@@'\nvm_uuid = '@@{id}@@'\n\ncategory_name = 'AppType'\ncategory_key = '{}-{}-{}'.format(project_name, app_name, random_num)\nresult = add_category_key(category_name, category_key)\nif result:\n  print('New key created in category: {}, value: {}'.format(category_name, category_key))\nelse:\n  print('Error while creating a new key')\n  exit(1)\n\nresp, status = update_vm_category(vm_uuid, category_name, category_key)\nif status:\n  print('VM updated with category')\nelse:\n  print('Error in updating the VM category')\n  exit(1)\n\n# Base ACL here to allow Calm to manage VMs over ssh and powershell\nbase_acl = [\n  {'ip': '0.0.0.0', 'prefix': 0, 'protocol': 'TCP', 'port': 22},\n  {'ip': '0.0.0.0', 'prefix': 0, 'protocol': 'TCP', 'port': 5985},\n]\n\nresp, status = create_security_policy(category_name, category_key, description, base_acl)\nif status:\n  print('Security policy created ...')\n  print('POLICY_UUID={}'.format(resp['metadata']['uuid']))\n  print('INBOUND_ACL={}'.format(json.dumps(base_acl)))\nelse:\n  print('Error in creating the policy')\n  exit(1)\n","eval_variables":["POLICY_UUID","INBOUND_ACL"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"wait","attrs":{"type":"","interval_secs":60},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"add_user_to_localadmin","attrs":{"exit_status":[],"script":"Add-LocalGroupMember -Group \"Administrators\" -Member \"@@{calm_username}@@\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"SVC_ACCOUNT"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"91f61c51_runbook","main_task_local_reference":{"kind":"app_task","name":"bd92bd7c_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"remove_flow_policy"}],"name":"a1e3ddb7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"remove_flow_policy","attrs":{"exit_status":[],"script":"#script\n\n# Task name: Delete a security policy\n# Description: Used to clean up calm-flow integeration\n#\n# Required Calm variables: \n#   POLICY_UUID\n# Version: v1.0\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n\n\n# Prism API call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  jwt = '@@{calm_jwt}@@'\n  pc_address = '127.0.0.1'\n  pc_port = '9440'\n\n  url = \"https:\/\/{}:{}\/api\/nutanix\/v3\/{}\".format(\n    pc_address,\n    pc_port,\n    api_endpoint\n  )\n\n  headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json',\n    'Authorization': 'Bearer {}'.format(jwt)\n  }\n\n  if len(payload) > 0:\n    payload = json.dumps(payload)\n\n\n  resp = urlreq(\n    url,\n    verb=method,\n    params=payload,\n    headers=headers,\n    verify=False\n  )\n\n  if resp.ok:\n    return json.loads(resp.content), resp.ok\n  else:\n    print('Error in API call')\n    print(resp)\n\n\npolicy_uuid = '@@{POLICY_UUID}@@'\nif len(policy_uuid) != 0:\n  _, status = http_request('network_security_rules\/{}'.format(policy_uuid), method='DELETE')\n  if status:\n    print('Policy {} deleted ...'.format(policy_uuid))\n  else:\n    print('Error in deleting the policy')\nprint('POLICY_UUID=')","eval_variables":["POLICY_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"420a4f1f_runbook","main_task_local_reference":{"kind":"app_task","name":"a1e3ddb7_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"fbfd3b05_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"WIN_VM1"},"variable_list":[],"description":""}],"environment_reference_list":[],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"print_acl"}],"name":"b9b023b2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"print_acl","attrs":{"script":"if len('@@{INBOUND_ACL}@@') == 0 or '@@{INBOUND_ACL}@@' == 'null':\n    current_acl = []\nelse:\n    current_acl = json.loads('@@{INBOUND_ACL}@@')\n\nprint(\"No\\t Source\\t\\t Protocol\")\nprint(\"=====================================\")\nfor index, ace in enumerate(current_acl):\n    if ace['protocol'] == 'TCP' or ace['protocol'] == 'UDP':\n        print('[{}]\\t {}\/{}\\t {}\/{}'.format(index, ace['ip'], ace['prefix'], \n        ace['port'], ace['protocol'].lower()))\n    else:\n        print('[{}]\\t {}\/{}\\t {}'.format(index, ace['ip'], ace['prefix'], \n        ace['protocol'].lower()))\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"45cf3ed9_runbook","main_task_local_reference":{"kind":"app_task","name":"b9b023b2_dag"},"variable_list":[]},"name":"Print Flow Policy"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"insert_entry_in_acl"}],"name":"7b88ac49_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"insert_entry_in_acl","attrs":{"exit_status":[],"script":"#script\n\n# Task name: adds a security entry to an existing flow policy\n# Description: \n#\n# Required Calm variables: \n#   POLICY_UUID\n#   INBOUND_ACL\n#   SOURCE_IP: source IP address network address\n#   PREFIX: source network ID prefix\n#   PROTOCOL: a list of protocol [ALL, ICMP, TCP, UDP]\n#   DEST_PORT: dest port\n# Version: v1.0\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n\n\n# Prism API call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  jwt = '@@{calm_jwt}@@'\n  pc_address = '127.0.0.1'\n  pc_port = '9440'\n\n  url = \"https:\/\/{}:{}\/api\/nutanix\/v3\/{}\".format(\n      pc_address,\n      pc_port,\n      api_endpoint\n  )\n\n  headers = {\n      'Content-Type': 'application\/json',\n      'Accept': 'application\/json',\n      'Authorization': 'Bearer {}'.format(jwt)\n  }\n\n  if len(payload) > 0:\n      payload = json.dumps(payload)\n\n\n  resp = urlreq(\n      url,\n      verb=method,\n      params=payload,\n      headers=headers,\n      verify=False\n  )\n\n  if resp.ok:\n      return json.loads(resp.content), resp.ok\n  else:\n      print('Error in API call')\n      print(resp)\n      print(resp.content)\n\n\ndef generate_ace(ace):\n    ip = ace.get('ip')\n    prefix = int(ace.get('prefix', 0))\n    proto = ace.get('protocol')\n    port = int(ace.get('port', 0))\n    entry = {\n        'peer_specification_type': 'IP_SUBNET',\n        'ip_subnet': {\n            'ip': ip,\n            'prefix_length': prefix\n        },\n        'protocol': proto,\n    }\n    \n    if proto == 'TCP':\n        entry['tcp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n    elif proto == 'UDP':\n        entry['udp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n\n    return entry\n\n\ndef append_security_policy(policy_uuid, current_acl, new_ace):\n    policy, status = http_request('network_security_rules\/{}'.format(policy_uuid), method='GET')\n\n    if status:\n        acl = []\n        for ace in current_acl:\n            acl.append(generate_ace(ace))\n        \n        acl.append(generate_ace(new_ace))\n\n        del(policy['status'])\n        policy['spec']['resources']['app_rule']['inbound_allow_list'] = acl\n        _, ok = http_request('network_security_rules\/{}'.format(policy_uuid), payload=policy, method='PUT')\n        if ok:\n            print('API for policy updated passed ...')\n            return True\n        else:\n            print('Error in API call to update policy')\n            return False\n    else:\n        print('Error not able to get current policy')\n        return False\n\n\n# ##########################################################################################\n# Main task function\n# ##########################################################################################\n\npolicy_uuid = '@@{POLICY_UUID}@@'\nif len(policy_uuid) == 0:\n    print('Error: No Flow plicy loaded yet, please create one before adding entries')\n    exit(1)\n\nif len('@@{INBOUND_ACL}@@') == 0 or '@@{INBOUND_ACL}@@' == 'null':\n    current_acl = []\nelse:\n    current_acl = json.loads('@@{INBOUND_ACL}@@')\n\nace = {\n    'ip': '@@{SOURCE_IP}@@',\n    'prefix': int('0@@{PREFIX}@@'),\n    'protocol': '@@{PROTOCOL}@@',\n    'port': int('0@@{DEST_PORT}@@')\n}\n\nstatus = append_security_policy(policy_uuid, current_acl, ace)\n\nif status:\n    print('Policy updated ...')\n    current_acl.append(ace)\n    print('INBOUND_ACL={}'.format(json.dumps(current_acl)))\nelse:\n    print('Error in updating the policy')\n\n","eval_variables":["INBOUND_ACL"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"7235ba55_runbook","main_task_local_reference":{"kind":"app_task","name":"7b88ac49_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"DEST_PORT","value":"0","label":"Destination Port","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PROTOCOL","value":"ALL","label":"Protocol","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["ALL","ICMP","TCP","UDP"]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PREFIX","value":"0","label":"Source Network Prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SOURCE_IP","value":"0.0.0.0","label":"Source Network","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"Append to Flow Policy"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"delete_current"},{"kind":"app_task","name":"deploy default flow policy"}],"name":"06aa1ee9_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"delete_current"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"deploy default flow policy"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"delete_current","attrs":{"exit_status":[],"script":"#script\n\n# Task name: Delete a security policy\n# Description: Used to clean up calm-flow integeration\n#\n# Required Calm variables: \n#   POLICY_UUID\n# Version: v1.0\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n\n\n# Prism API call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  jwt = '@@{calm_jwt}@@'\n  pc_address = '127.0.0.1'\n  pc_port = '9440'\n\n  url = \"https:\/\/{}:{}\/api\/nutanix\/v3\/{}\".format(\n    pc_address,\n    pc_port,\n    api_endpoint\n  )\n\n  headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json',\n    'Authorization': 'Bearer {}'.format(jwt)\n  }\n\n  if len(payload) > 0:\n    payload = json.dumps(payload)\n\n\n  resp = urlreq(\n    url,\n    verb=method,\n    params=payload,\n    headers=headers,\n    verify=False\n  )\n\n  if resp.ok:\n    return json.loads(resp.content), resp.ok\n  else:\n    print('Error in API call')\n    print(resp)\n\n\npolicy_uuid = '@@{POLICY_UUID}@@'\nif len(policy_uuid) != 0:\n  _, status = http_request('network_security_rules\/{}'.format(policy_uuid), method='DELETE')\n  if status:\n    print('Policy {} deleted ...'.format(policy_uuid))\n  else:\n    print('Error in deleting the policy')\nprint('POLICY_UUID=')","eval_variables":["POLICY_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"deploy default flow policy","attrs":{"exit_status":[],"script":"#script\n\n# Task name: Create a secuirty policy based on project and application name\n# Description: \n#\n# Required Calm variables: \n#   None\n# Version: v1.0\n# Author: Husain Ebrahim <husain.ebrahim@nutanix.com>\n\n\n# Prism API call function\n# ================================================================\ndef http_request(api_endpoint, payload='', method='POST'):\n  jwt = '@@{calm_jwt}@@'\n  pc_address = '127.0.0.1'\n  pc_port = '9440'\n\n  url = \"https:\/\/{}:{}\/api\/nutanix\/v3\/{}\".format(\n    pc_address,\n    pc_port,\n    api_endpoint\n  )\n\n  headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json',\n    'Authorization': 'Bearer {}'.format(jwt)\n  }\n\n  if len(payload) > 0:\n    payload = json.dumps(payload)\n\n\n  resp = urlreq(\n    url,\n    verb=method,\n    params=payload,\n    headers=headers,\n    verify=False\n  )\n\n  if resp.ok:\n    return json.loads(resp.content), resp.ok\n  else:\n    print('Error in API call')\n    print(resp)\n    print(resp.content)\n\n\ndef add_category_key(category_name, category_key):\n  payload = {'value': category_key}\n  _, status = http_request('categories\/{}\/{}'.format(category_name, category_key), payload=payload, method='PUT')\n  if status:\n    return True\n  else:\n    return False\n\n\ndef update_vm_category(vm_uuid, category_name, cateogry_key):\n  resp, status = http_request('vms\/{}'.format(vm_uuid), method='GET')\n  if status:\n    payload = {\n      'spec': resp['spec'],\n      'api_version': resp['api_version'],\n      'metadata': resp['metadata']\n    }\n  else:\n    print('Error getting VM details from Prism')\n    exit(1)\n\n  payload['metadata']['categories'][category_name] = category_key\n\n  result, status = http_request('vms\/{}'.format(vm_uuid), payload=payload, method='PUT')\n\n  return result, status\n\n\ndef generate_ace(ace):\n  ip = ace.get('ip')\n  prefix = int(ace.get('prefix', 0))\n  proto = ace.get('protocol')\n  port = int(ace.get('port', 0))\n  entry = {\n    'peer_specification_type': 'IP_SUBNET',\n    'ip_subnet': {\n      'ip': ip,\n      'prefix_length': prefix\n    },\n    'protocol': proto,\n  }\n  \n  if proto == 'TCP':\n    entry['tcp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n  elif proto == 'UDP':\n    entry['udp_port_range_list'] = [{'start_port': port, 'end_port': port}]\n\n  return entry\n\ndef create_security_policy(category_name, category_key, description='', base_acl=[]):\n  name = 'calm-{}'.format(category_key)\n  if len(description) == 0:\n      description = name\n\n  target_group = {\n    'peer_specification_type': 'FILTER',\n    'filter': {\n      'type': 'CATEGORIES_MATCH_ALL',\n      'kind_list': ['vm'],\n      'params': {category_name: [category_key]}\n    }\n  }\n\n  resources = {\n    'allow_ipv6_traffic': False,\n    'is_policy_hitlog_enabled': False,\n    'app_rule': {\n      'target_group': target_group,\n      'inbound_allow_list': [],\n      'outbound_allow_list': [{'peer_specification_type': 'ALL'}],\n      'action': 'APPLY'\n    }\n  }\n\n  acl = []\n  for ace in base_acl:\n    acl.append(generate_ace(ace))\n\n  resources['app_rule']['inbound_allow_list'] = acl\n\n  payload = {\n    'api_version': '3.1.0',\n    'metadata': {'kind': 'network_security_rule'},\n    'spec': {\n      'name': name,\n      'description': description,\n      'resources': resources\n    }\n  }\n\n  resp, status =  http_request('network_security_rules', payload=payload)\n  return resp, status\n\n# ##########################################################################################\n# Main task function\n# ##########################################################################################\n\nproject_name = re.sub('[\\W_]+', '', '@@{calm_project_name}@@')\napp_name = re.sub('[\\W_]+', '', '@@{calm_application_name}@@')\ndescription = 'Project name: {}, Application name: {}'.format('@@{calm_project_name}@@'\n                                                      ,'@@{calm_application_name}@@')\nrandom_num = '@@{calm_random}@@'\nvm_uuid = '@@{id}@@'\n\ncategory_name = 'AppType'\ncategory_key = '{}-{}-{}'.format(project_name, app_name, random_num)\nresult = add_category_key(category_name, category_key)\nif result:\n  print('New key created in category: {}, value: {}'.format(category_name, category_key))\nelse:\n  print('Error while creating a new key')\n  exit(1)\n\nresp, status = update_vm_category(vm_uuid, category_name, category_key)\nif status:\n  print('VM updated with category')\nelse:\n  print('Error in updating the VM category')\n  exit(1)\n\n# Base ACL here to allow Calm to manage VMs over ssh and powershell\nbase_acl = [\n  {'ip': '0.0.0.0', 'prefix': 0, 'protocol': 'TCP', 'port': 22},\n  {'ip': '0.0.0.0', 'prefix': 0, 'protocol': 'TCP', 'port': 5985},\n]\n\nresp, status = create_security_policy(category_name, category_key, description, base_acl)\nif status:\n  print('Security policy created ...')\n  print('POLICY_UUID={}'.format(resp['metadata']['uuid']))\n  print('INBOUND_ACL={}'.format(json.dumps(base_acl)))\nelse:\n  print('Error in creating the policy')\n  exit(1)\n","eval_variables":["POLICY_UUID","INBOUND_ACL"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"b770e1da_runbook","main_task_local_reference":{"kind":"app_task","name":"06aa1ee9_dag"},"variable_list":[]},"name":"Reset Flow Policy"}],"name":"Default","variable_list":[{"regex":{"should_validate":true,"value":"^(?![0-9]{1,15}$)[a-zA-Z0-9-]{1,15}$"},"val_type":"STRING","is_mandatory":true,"description":"Maximum 15 chars long","data_type":"BASE","type":"LOCAL","name":"VM_NAME","value":"vm1","label":"Windows machine name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"INBOUND_ACL","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"POLICY_UUID","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"SVC_ACCOUNT"},"type":"USER"},"name":"Windows 2016 - Domain Joined"},"api_version":"3.0","metadata":{"last_update_time":"1615882560179757","kind":"blueprint","spec_version":3,"creation_time":"1615881952598749","categories":{"TemplateType":"Vm"},"name":"Windows 2016 - Domain Joined"}}