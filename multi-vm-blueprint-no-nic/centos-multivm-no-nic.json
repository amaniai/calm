{"status":{},"contains_secrets":false,"product_version":"3.1.0","spec":{"description":"","resources":{"client_attrs":{"201cf7a4_deployment":{"y":8,"x":214}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"update_vm_specs"}],"name":"9d64a3fa_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"update_vm_specs","attrs":{"script":"import requests\n\n# -------------- Test Environment ------------------\n# import urllib3\n# urllib3.disable_warnings()\n# vm_uuid = 'cc5c5a73-e7e2-410d-96ee-e0bd5b12d1a5'\n# authorization = 'Basic YWRtaW46bngyVGVjaDkxMSE='\n# url = 'https:\/\/10.38.2.9:9440\/api\/nutanix\/v3\/{}'\n# vcpu = 2\n# memory = 8*1024\n# disk_size = 200*1024\n# vm_network = {'kind': 'subnet', 'uuid': '5db23efe-f18f-4719-a525-39c1e823409e'}\n# user_network_answer = 'yes'\n\n# -------------- Calm Environment ------------------\nvm_uuid = \"@@{id}@@\"\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nvcpu = int(\"@@{cpunum}@@\")\nmemory = int(\"@@{memorynum}@@\")*1024\ndisk_size = int(\"@@{storage}@@\")*1024\nvm_network = json.loads('@@{VM_NETWORK}@@' if '@@{VM_NETWORK}@@' else '{}')\nuser_network_answer = '@@{INTERNET_ACCESS}@@'.lower()\n\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n\n# How do we handle cost showbacks on the instances?\n###################### DO NOT MODIFY BELOW HERE ######################\n#\n######################     DEFINE FUNCTIONS     ######################\n# define the function 'rest_call\u2019\n# this encapsulates the api call.\n\n######################## GET VM SPEC ########################\n\nresp = requests.get(url.format('vms\/'+vm_uuid), **kwargs)\nif resp.status_code == 200:\n    print('INFO - get VM API was successful')\n    response = resp.json()\nelse:\n    print('ERROR - get vm api call failed, vm uuid: {}, status code: {}'.format(vm_uuid, resp.status_code))\n    print('ERROR - Msg: {}'.format(resp.content))\n    exit(1)\n\n\ndel response['status']\n# update 'spec\u2019 element in the 'response\u2019 object with new vpcu and mem\nresponse['spec']['resources']['num_sockets'] = vcpu\nresponse['spec']['resources']['memory_size_mib'] = memory\n\n# if user want network access add a nic from the VM_NETWORK\nif user_network_answer.lower() == 'yes':\n    nic_card = {'nic_type': 'NORMAL_NIC', 'vlan_mode': 'ACCESS',\n                'subnet_reference': vm_network, 'is_connected': True}\n    response['spec']['resources']['nic_list'] = [nic_card]\nelse:\n    response['spec']['resources']['nic_list'] = []\n\n# let\u2019s address the space allocation on disk 0\ndel response['spec']['resources']['disk_list'][0]['disk_size_bytes']\nresponse['spec']['resources']['disk_list'][0]['disk_size_mib'] = disk_size\n\nresp = requests.put(url.format('vms\/'+vm_uuid), json=response, **kwargs)\nif resp.status_code == 202:\n    print('INFO - VM updated was successful')\nelse:\n    print('ERROR - VM uuid: {} update operation failed, status code: {}'.format(vm_uuid, resp.status_code))\n    print('ERROR - Msg: {}'.format(resp.content))\n    exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"448d77ec_runbook","main_task_local_reference":{"kind":"app_task","name":"9d64a3fa_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"b0aecf66_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3e78c312_runbook","main_task_local_reference":{"kind":"app_task","name":"b0aecf66_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"acf700f4_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"15a7a7a2_runbook","main_task_local_reference":{"kind":"app_task","name":"acf700f4_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"610acf85_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f5044e9a_runbook","main_task_local_reference":{"kind":"app_task","name":"610acf85_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Service1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"34365a9d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5482251e_runbook","main_task_local_reference":{"kind":"app_task","name":"34365a9d_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"Service1","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"VM_NETWORK","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"check_project_limits"},{"kind":"app_task","name":"set_network"}],"name":"d0e2672e_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"check_project_limits"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"set_network"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"check_project_limits","attrs":{"script":"import requests\n\n# -------------- Test Environment ------------------\n# import urllib3\n# urllib3.disable_warnings()\n# project_name = 'test'\n# authorization = 'Basic YWRtaW46bngyVGVjaDkxMSE='\n# url = 'https:\/\/10.38.2.9:9440\/api\/nutanix\/v3\/{}'\n# vcpu = 1\n# memory = 4\n# disk_size = 100\n# index = 0\n# count = 2\n\n# -------------- Calm Environment ------------------\nproject_name = '@@{calm_project_name}@@'\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\nvcpu = int('@@{cpunum}@@')\nmemory = int('@@{memorynum}@@')\ndisk_size = int('@@{storage}@@')\nindex = int('@@{calm_array_index}@@')\ncount = int('@@{count}@@')\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\n# exit if running on the first instance\nif index:\n    print('INFO - will only run on the first instance')\n    exit(0)\n\n# --------- Get project details (networks, limits and usage) -------------------\n# ------------------------------------------------------------------------------\npayload = {'kind': 'project'}\nproject_limits = {}\nproject_uuid = ''\nresp = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nif resp.status_code == 200:\n    for project in resp.json()['entities']:\n        if project['spec']['name'] == project_name:\n            project_uuid = project['metadata']['uuid']\n            print('INFO - uuid for project ({}) is: {}'.format(project_name, project_uuid))\n            if project['spec']['resources'].get('resource_domain'):\n                for resource in project['spec']['resources']['resource_domain']['resources']:\n                    project_limits[resource['resource_type'].lower()] = resource['limit']\n                print('INFO - found project limits: {}'.format(project_limits))\n            else:\n                print('INFO - No project limits, stopping check')\n                exit(0)\n\n\n# --------- Get project utilization  ----------------------- -------------------\n# ------------------------------------------------------------------------------\npayload = {\n    \"entity_type\": \"vm\",\n    \"group_member_sort_attribute\": \"memory_size_bytes\",\n    \"group_member_sort_order\": \"DESCENDING\",\n    \"group_member_attributes\": [\n        {\"attribute\": \"memory_size_bytes\"},\n        {\"attribute\": \"capacity_bytes\"},\n        {\"attribute\": \"project_name\"},\n        {\"attribute\": \"num_vcpus\"}\n    ],\n    \"query_name\": \"prism:BaseGroupModel\",\n    \"availability_zone_scope\": \"GLOBAL\",\n    \"filter_criteria\": \"project_reference=in={}\".format(project_uuid),\n    \"group_member_offset\": 0,\n    \"group_member_count\": 1000\n}\n#\nresp = requests.post(url.format('groups'), json=payload, **kwargs)\nproject_usage = {'vcpus': 0, 'memory': 0, 'storage': 0}\n\nif resp.status_code == 200:\n    if resp.json().get('filtered_entity_count'):\n        result = resp.json()['group_results'][0].get('entity_results', [])\n        print(resp.json())\n        for resource in result:\n            remapped = {}\n            for item in resource.get('data'):\n                if item['values']:\n                    remapped[item['name']] = item['values'][0]['values'][0]\n\n            project_usage['vcpus'] += int(remapped.get('num_vcpus', 0))\n            project_usage['memory'] += int(remapped.get('memory_size_bytes', 0))\n            project_usage['storage'] += int(remapped.get('capacity_bytes', 0))\n\n    print('INFO - Limits: {}'.format(project_limits))\n    print('INFO - Usage: {}'.format(project_usage))\nelse:\n    print('ERROR - Projects list API call failed, status code: {}'.format(resp.status_code))\n    print('ERROR - Msg: {}'.format(resp.content))\n    exit(1)\n\n# check if all required resources within limits\ntotal_vcpu = vcpu*count\ntotal_memory = memory*count*1073741824\ntotal_storage = disk_size*count*1073741824\n\nif project_usage['vcpus'] + total_vcpu > project_limits['vcpus']:\n    print('ERROR - CPU exceed project limit: {}'.format(project_limits['vcpus']))\n    exit(1)\nelif project_usage['memory'] + total_memory > project_limits['memory']:\n    print('ERROR - Memory exceed project limit: {}'.format(project_limits['memory']))\n    exit(1)\nelif project_usage['storage'] + total_storage > project_limits['storage']:\n    print('ERROR - Storage exceeds project limits: {}'.format(project_limits['storage']))\n    exit(1)\nelse:\n    print('INFO - Total resources within project limit')\n    print('INFO - Total required resources: vCPU: {}, RAM: {} Bytes, Disk: {} Bytes'\n          .format(total_vcpu, total_memory, total_storage))\n\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"set_network","attrs":{"exit_status":[],"script":"import requests\n\n# -------------- Test Environment ------------------\n# import json\n# import urllib3\n# urllib3.disable_warnings()\n# user_network_answer = 'yes'\n# project_name = 'default'\n# authorization = 'Basic YWRtaW46bngyVGVjaDkxMSE='\n# url = 'https:\/\/10.38.2.9:9440\/api\/nutanix\/v3\/{}'\n\n# -------------- Calm Environment ------------------\nuser_network_answer = '@@{INTERNET_ACCESS}@@'.lower()\nproject_name = '@@{calm_project_name}@@'\nauthorization = 'Bearer @@{calm_jwt}@@'\nurl = 'https:\/\/127.0.0.1:9440\/api\/nutanix\/v3\/{}'\n\n\nkwargs = {\n    'verify': False,\n    'headers': {'Authorization': authorization}\n}\n\nif user_network_answer.lower() == 'no':\n    print('INFO - no network access, stopping script')\n    exit(0)\n# --------- Get project details (networks, limits and usage) -------------------\n# ------------------------------------------------------------------------------\npayload = {'kind': 'project'}\nresp = requests.post(url.format('projects\/list'), json=payload, **kwargs)\nvm_network = {}\nif resp.status_code == 200:\n    for project in resp.json()['entities']:\n        if project['spec']['name'] == project_name:\n            print('INFO - Found project {} with uuid: {}'.format(project_name, project['metadata']['uuid']))\n            if project['status']['resources']['is_default']:\n                vm_network = project['status']['resources']['default_subnet_reference']\n                print('INFO - selecting project default network: {}'.format(vm_network))\n            else:\n                vm_network = project['status']['resources']['subnet_reference_list'][0]\n                print('WARNING - no default network is set on the project, returning first network: {}'\n                      .format(vm_network))\n            print('VM_NETWORK={}'.format(json.dumps(vm_network)))\n            exit(0)\nelse:\n    print('ERROR - Projects list API call failed, status code: {}'.format(resp.status_code))\n    print('ERROR - Msg: {}'.format(resp.content))\n    exit(1)\n\n","eval_variables":["VM_NETWORK"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"35690bc1_runbook","main_task_local_reference":{"kind":"app_task","name":"d0e2672e_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"VM1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0f10a58f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5fbd6c62_runbook","main_task_local_reference":{"kind":"app_task","name":"0f10a58f_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"VM1","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"","delay_secs":"0","disable_readiness_probe":true},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"vm-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":1,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nssh_pwauth: True\nchpasswd:\n  list: |\n     @@{CENTOS.username}@@:@@{CENTOS.secret}@@\n  expire: False"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"1c301e50-5b02-40c3-a0c4-2a0f50b75a39","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"CentOS-7","uuid":"514b076d-183f-4667-b9ef-587523216e30"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"centos","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"CENTOS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Service1"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a7d6d825_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0a9dffda_runbook","main_task_local_reference":{"kind":"app_task","name":"a7d6d825_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"dc13fae1_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fe064aa2_runbook","main_task_local_reference":{"kind":"app_task","name":"dc13fae1_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"201cf7a4_deployment","min_replicas":"@@{count}@@","default_replicas":"@@{count}@@","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"10","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"VM1"},"variable_list":[],"description":""}],"description":"","action_list":[],"name":"Default","variable_list":[{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"INTERNET_ACCESS","value":"Yes","label":"Add Network Access?","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Yes","No"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"storage","value":"100","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"memorynum","value":"4","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"cpunum","value":"1","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"count","value":"1","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"CENTOS"},"type":"USER"},"name":"centos-multivm-no-nic"},"api_version":"3.0","metadata":{"last_update_time":"1606317425896290","kind":"blueprint","spec_version":7,"creation_time":"1606314494397606","name":"centos-multivm-no-nic"}}