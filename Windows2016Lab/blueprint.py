# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_GUACADMIN_PASSWORD = read_local_file("BP_CRED_GUACADMIN_PASSWORD")
Profile_Default_variable_ADMIN_PASS = read_local_file(
    "Profile_Default_variable_ADMIN_PASS"
)

# Credentials
BP_CRED_GUACADMIN = basic_cred(
    "guacadmin",
    BP_CRED_GUACADMIN_PASSWORD,
    name="GUACADMIN",
    type="PASSWORD",
    default=True,
)


class Windows2016(Service):

    ACCESS_USERNAME = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    ACCESS_PASSWORD = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CONNECTION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    EMAIL = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.SetVariable.escript(
            name="set_parameters",
            filename=os.path.join(
                "scripts",
                "Service_Windows2016_Action___create___Task_set_parameters.py",
            ),
            target=ref(Windows2016),
            variables=["ACCESS_USERNAME", "ACCESS_PASSWORD"],
        )
        CalmTask.SetVariable.escript(
            name="create_connection",
            filename=os.path.join(
                "scripts",
                "Service_Windows2016_Action___create___Task_create_connection.py",
            ),
            target=ref(Windows2016),
            variables=["CONNECTION_ID"],
        )
        CalmTask.Exec.escript(
            name="send_email",
            filename=os.path.join(
                "scripts", "Service_Windows2016_Action___create___Task_send_email.py"
            ),
            target=ref(Windows2016),
        )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        CalmTask.Exec.escript(
            name="delete connections",
            filename=os.path.join(
                "scripts",
                "Service_Windows2016_Action___delete___Task_deleteconnections.py",
            ),
            target=ref(Windows2016),
        )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 8
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("windows-2016", bootable=True)]
    nics = [
        AhvVmNic.NormalNic.ingress(
            "TVTC-Main Network", cluster="Middle-East-Lab-cluster2"
        )
    ]

    guest_customization = AhvVmGC.Sysprep.PreparedScript.withoutDomain(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_sysprep_unattend_xml.xml"
        )
    )


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources


class VM_WINDOWS2016(Substrate):

    os_type = "Windows"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time
    provider_spec_editables = read_spec(
        os.path.join("specs", "VM_WINDOWS2016_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="POWERSHELL",
        disabled=True,
        retries="5",
        connection_port=5985,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
    )


class Package1(Package):

    services = [ref(Windows2016)]


class _555b2ae3_deployment(Deployment):

    name = "555b2ae3_deployment"
    min_replicas = "@@{COUNT}@@"
    max_replicas = "1"
    default_replicas = "@@{COUNT}@@"

    packages = [ref(Package1)]
    substrate = ref(VM_WINDOWS2016)


class Default(Profile):

    deployments = [_555b2ae3_deployment]

    ADMIN_PASS = CalmVariable.Simple.Secret(
        Profile_Default_variable_ADMIN_PASS,
        label="Admin Password",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    ACCESS_URL = CalmVariable.Simple(
        "http://10.21.21.122:8080/guacamole/api/",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    REMOTE_APP = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=True, runtime=False, description=""
    )

    MAIL_GW = CalmVariable.Simple(
        "http://10.21.21.120/mail/",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    EMAIL_LIST = CalmVariable.Simple.multiline(
        "",
        label="Email Address",
        regex=" ",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Enter each user email address in a separate line (if  requested seats more than emails, the notification will be sent to the first email address)",
    )

    COUNT = CalmVariable.WithOptions.Predefined.int(
        ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
        label="Seat Count",
        default="1",
        regex="^[\d]*$",
        validate_regex=False,
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Number of applications to provision (min 1 and max 10)",
    )

    PUBLIC_ACCESS_URL = CalmVariable.Simple(
        "https://lab.ntnx.me/access/",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    LAB_EXPIRY = CalmVariable.WithOptions(
        ["Never", "4 Hours", "12 Hours", "1 Day"],
        label="Lab Expiry",
        default="Never",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )


class Windows2016Lab(Blueprint):
    """Windows Server 2016"""

    services = [Windows2016]
    packages = [Package1]
    substrates = [VM_WINDOWS2016]
    profiles = [Default]
    credentials = [BP_CRED_GUACADMIN]
