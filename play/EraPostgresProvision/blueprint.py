# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_db_server_creds_KEY = read_local_file("BP_CRED_db_server_creds_KEY")
BP_CRED_era_creds_PASSWORD = read_local_file("BP_CRED_era_creds_PASSWORD")
Profile_Default_variable_db_password = read_local_file(
    "Profile_Default_variable_db_password"
)

# Credentials
BP_CRED_db_server_creds = basic_cred(
    "era",
    BP_CRED_db_server_creds_KEY,
    name="db_server_creds",
    type="KEY",
)
BP_CRED_era_creds = basic_cred(
    "admin",
    BP_CRED_era_creds_PASSWORD,
    name="era_creds",
    type="PASSWORD",
    default=True,
)


class Postgres(Service):

    TM_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SNAP_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SNAP_ENTITY_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class Era_PostgreSQL_DB(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "Era_PostgreSQL_DB_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="60",
        credential=ref(BP_CRED_db_server_creds),
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="1GetClusterID",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__1GetClusterID.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["CLUSTER_ID"],
        )
        CalmTask.SetVariable.escript(
            name="2GetProfileIDs",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__2GetProfileIDs.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=[
                "COMPUTE_PROF_ID",
                "DB_PARAM_ID",
                "NETWORK_PROF_ID",
                "SOFTWARE_PROF_ID",
            ],
        )
        CalmTask.SetVariable.escript(
            name="3GetSLAID",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__3GetSLAID.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["SLA_ID", "DB_NAME"],
        )
        CalmTask.SetVariable.escript(
            name="4ProvisionDB",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__4ProvisionDB.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["CREATE_OPERATION_ID"],
        )
        CalmTask.SetVariable.escript(
            name="5MonitorOperation",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__5MonitorOperation.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["DB_ENTITY_NAME"],
        )
        CalmTask.SetVariable.escript(
            name="6GetDatabaseInfo",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___pre_create___Task__6GetDatabaseInfo.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["DB_ID", "DB_SERVER_ID", "DB_SERVER_IP"],
        )

    @action
    def __post_delete__():

        CalmTask.SetVariable.escript(
            name="1CleanupDB",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___post_delete___Task__1CleanupDB.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["CLEANUP_OPERATION_ID"],
        )
        CalmTask.Exec.escript(
            name="2MonitorCleanupOp",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___post_delete___Task__2MonitorCleanupOp.py",
            ),
            target=ref(Era_PostgreSQL_DB),
        )
        CalmTask.SetVariable.escript(
            name="3DeregisterDBServer",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___post_delete___Task__3DeregisterDBServer.py",
            ),
            target=ref(Era_PostgreSQL_DB),
            variables=["DEREGISTER_OPERATION_ID"],
        )
        CalmTask.Exec.escript(
            name="4MonitorDeregOp",
            filename=os.path.join(
                "scripts",
                "Substrate_Era_PostgreSQL_DB_Action___post_delete___Task__4MonitorDeregOp.py",
            ),
            target=ref(Era_PostgreSQL_DB),
        )


class Postgres_Package(Package):

    services = [ref(Postgres)]


class f6be2786_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(Postgres_Package)]
    substrate = ref(Era_PostgreSQL_DB)


class Default(Profile):

    deployments = [f6be2786_deployment]

    compute_profile = CalmVariable.Simple(
        "DEFAULT_OOB_COMPUTE",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    database_parameter = CalmVariable.Simple(
        "DEFAULT_POSTGRES_PARAMS",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    db_name_prefix = CalmVariable.Simple(
        "psql",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    db_password = CalmVariable.Simple.Secret(
        Profile_Default_variable_db_password,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    era_ip = CalmVariable.Simple(
        "10.45.5.40",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    network_profile = CalmVariable.Simple(
        "DEFAULT_OOB_NETWORK",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    sla_name = CalmVariable.Simple(
        "GOLD",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    software_profile = CalmVariable.Simple(
        "POSTGRES_10.4_OOB",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def GetSnapshotList():

        CalmTask.SetVariable.escript(
            name="1GetTimeMachineID",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_GetSnapshotList_Task__1GetTimeMachineID.py",
            ),
            target=ref(Postgres),
            variables=["TM_ID"],
        )
        CalmTask.Exec.escript(
            name="2GetSnapshotList",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_GetSnapshotList_Task__2GetSnapshotList.py",
            ),
            target=ref(Postgres),
        )

    @action
    def TakeSnapshot():

        CalmTask.SetVariable.escript(
            name="1GetTimeMachineID",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_TakeSnapshot_Task__1GetTimeMachineID.py",
            ),
            target=ref(Postgres),
            variables=["TM_ID"],
        )
        CalmTask.SetVariable.escript(
            name="2TakeSnapshot",
            filename=os.path.join(
                "scripts", "Profile_Default_Action_TakeSnapshot_Task__2TakeSnapshot.py"
            ),
            target=ref(Postgres),
            variables=["SNAP_OPERATION_ID"],
        )
        CalmTask.SetVariable.escript(
            name="3MonitorOperation",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_TakeSnapshot_Task__3MonitorOperation.py",
            ),
            target=ref(Postgres),
            variables=["SNAP_ENTITY_ID"],
        )


class EraPostgresProvision(Blueprint):

    services = [Postgres]
    packages = [Postgres_Package]
    substrates = [Era_PostgreSQL_DB]
    profiles = [Default]
    credentials = [BP_CRED_db_server_creds, BP_CRED_era_creds]
